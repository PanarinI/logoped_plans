import os
from dotenv import load_dotenv
from openai import OpenAI
import gradio as gr
import time
from datetime import datetime
import calendar
from docx import Document
import tempfile
import boto3
from botocore.exceptions import ClientError
import random
import logging

from app.quotes import quotes
from app.drawings import drawings
import app.prompt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api_key = os.getenv("API_KEY_openai")
client = OpenAI(api_key=api_key)
VS_ID = os.getenv("VECTOR_STORE_ID")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ presigned URL –¥–ª—è S3
def generate_presigned_url(bucket_name, object_key, expiration=3600):
    s3 = boto3.client(
        's3',
        endpoint_url='https://s3.timeweb.cloud',
        aws_access_key_id=os.getenv('S3_ACCESS_KEY'),
        aws_secret_access_key=os.getenv('S3_SECRET_KEY')
    )
    try:
        url = s3.generate_presigned_url(
            'get_object',
            Params={'Bucket': bucket_name, 'Key': object_key},
            ExpiresIn=expiration
        )
        return url
    except ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ S3: {str(e)}")
        return None



# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –∑–∞–Ω—è—Ç–∏—è
def generate_lesson_plan_interface(
        –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞, –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è,
        —Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π, —Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è, —Ç–µ–º–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è,
        –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –Ω–∞–ª–∏—á–∏–µ_–î–ó, —Ä–∞–∑—Ä–µ—à–µ–Ω_file_search, —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü=None
):
    # –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ - –µ—Å–ª–∏ –µ—Å—Ç—å, –ø–µ—Ä–µ–¥–∞–µ–º
    #–∏—Å—Ç–æ—á–Ω–∏–∫–∏ = [web_sources] if —Ä–∞–∑—Ä–µ—à–µ–Ω_web_search and web_sources else []


    # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
    if not —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü:
        —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü = calendar.month_name[datetime.now().month]

    # –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        "–Ω–∞—Ä—É—à–µ–Ω–∏–µ": –Ω–∞—Ä—É—à–µ–Ω–∏–µ,
        "–≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞": –≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞,
        "—Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è": —Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è,
        "—Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è": —Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è,
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π,
        "—Ç–µ–º–∞": —Ç–µ–º–∞,
        "–æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è": –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è,
        "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å,
        "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è": –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è,
        "–Ω–∞–ª–∏—á–∏–µ_–î–ó": –Ω–∞–ª–∏—á–∏–µ_–î–ó,
        "—Ä–∞–∑—Ä–µ—à–µ–Ω_file_search": —Ä–∞–∑—Ä–µ—à–µ–Ω_file_search,
        #"–∏—Å—Ç–æ—á–Ω–∏–∫–∏": –∏—Å—Ç–æ—á–Ω–∏–∫–∏,
        "—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü": —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü
    }

    if —Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è == "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ":
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π = 1  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
        params["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π"] = 1  # –ò –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

    # instructions =

#    file_search_section = ""
#    if —Ä–∞–∑—Ä–µ—à–µ–Ω_file_search:
#        file_search_section = """
#      –ü—Ä–∞–≤–∏–ª–∞:
#    - –ü–ª–∞–Ω —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
#    - –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –Ω–µ—Ç - —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π –ø–ª–∞–Ω


#    """
#    instructions = instructions + file_search_section

    prompt = f"""
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–Ω—è—Ç–∏—è:
    - **–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:** {–Ω–∞—Ä—É—à–µ–Ω–∏–µ}
    - **–í–æ–∑—Ä–∞—Å—Ç:** {–≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞}
    - **–¶–µ–ª—å –∑–∞–Ω—è—Ç–∏—è:** {—Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è}
    - **–¢–µ–º–∞:** {—Ç–µ–º–∞ or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ - –æ–ø—Ä–µ–¥–µ–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"}
    - **–§–æ—Ä–º–∞—Ç:** {—Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è} ({–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π} –¥–µ—Ç–µ–π)
    - **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:** {–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å or "–Ω–µ —É–∫–∞–∑–∞–Ω - –Ω–∞ —Ç–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"}
    - **–ù–∞–ª–∏—á–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:** {–Ω–∞–ª–∏—á–∏–µ_–î–ó or "–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"}
    - **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** {–æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è or "–Ω–µ—Ç"}
    - **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è} –º–∏–Ω—É—Ç
    - **–ú–µ—Å—è—Ü –≥–æ–¥–∞:** {—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü}
    """

    tools = []
    tool_choice = None
    #FILE SEARCH
    if params['—Ä–∞–∑—Ä–µ—à–µ–Ω_file_search']:
        tools.append({
            "type": "file_search",
            "vector_store_ids": [VS_ID],
            "max_num_results": 20
        })
        tool_choice = {"type": "file_search"}
    #WEB SEARCH
#    if params['—Ä–∞–∑—Ä–µ—à–µ–Ω_web_search']:
#        tools.append({
#            "type": "web_search_preview",
#           "search_context_size": "medium",
#            "user_location": {"type": "approximate", "country": "RU"}
#        })
#        tool_choice = {"type": "web_search_preview"}

    response = client.responses.create(
        instructions=app.prompt.INSTRUCTIONS_1,
        input=prompt,
        model="gpt-4o-mini", # gpt-4o-mini   o3-mini
        tools=tools if tools else None,
        tool_choice=tool_choice,
        include=["file_search_call.results"],
        max_output_tokens=4096,
        #temperature=float(os.getenv("TEMPERATURE", 1)),
        #reasoning= {"effort":"medium"},
        stream=False
    )


####### –ë–ï–ó –°–¢–†–ò–ú–ò–ù–ì–ê
#    return response.output_text  # –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        full_text = response.output[0].content[0].text
    except (AttributeError, IndexError) as e:
        full_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞"
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        return full_text

    # 2. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        annotations = [
            ann for ann in response.output[0].content[0].annotations
            if ann.type == "file_citation"
        ]
        logging.debug(f"–ù–∞–π–¥–µ–Ω–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π: {len(annotations)}")
    except (AttributeError, IndexError) as e:
        annotations = []
        logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {str(e)}")

    # 3. –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
    if annotations:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞
        try:
            s3 = boto3.client(
                's3',
                endpoint_url='https://s3.timeweb.cloud',
                aws_access_key_id=os.getenv('S3_ACCESS_KEY'),
                aws_secret_access_key=os.getenv('S3_SECRET_KEY'),
            )

            bucket_name = os.getenv('S3_BUCKET_NAME')
            prefix = "KB_Logoped"

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ S3
            response_s3 = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
            file_references = {
                obj['Key'].split('/')[-1]: obj['Key']
                for obj in response_s3.get('Contents', [])
                if obj['Key'].endswith(('.pdf', '.docx'))
            }
        except ClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ S3: {str(e)}")
            file_references = {}
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å S3: {str(e)}")
            file_references = {}

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
        sorted_annotations = sorted(annotations, key=lambda x: x.index, reverse=True)

        for ann in sorted_annotations:
            try:
                filename = ann.filename
                insert_pos = ann.index

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
                if insert_pos > len(full_text):
                    logging.warning(f"–ü–æ–∑–∏—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ {insert_pos} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞")
                    continue

                if filename in file_references:
                    url = generate_presigned_url(
                        bucket_name=bucket_name,
                        object_key=file_references[filename]
                    )
                    if url:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É (–±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –≤ –Ω–∞—á–∞–ª–µ)
                        link_text = f"[üìö {filename}]({url})"
                        full_text = f"{full_text[:insert_pos]}{link_text}{full_text[insert_pos:]}"
                else:
                    logging.warning(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {str(e)}")
                continue

    return full_text

# –ê–ù–ù–û–¢–ê–¶–ò–ò –í –õ–û–ì
#    if params['—Ä–∞–∑—Ä–µ—à–µ–Ω_web_search']:  # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –≤–µ–±-–ø–æ–∏—Å–∫–µ
#        try:
#            content_block = response.output[1].content[0]
#            # logging.info(f"=== –ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ù–¢ –ë–õ–û–ö–ê ===")
#            # logging.info(f"–¢–∏–ø: {content_block.type}")
#            # logging.info(f"–¢–µ–∫—Å—Ç: {content_block.text[:200]}...")  # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
#            logging.info(f"–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {content_block.annotations}")
#            # logging.info(f"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {vars(content_block)}")  # –í—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
#        except (IndexError, AttributeError) as e:
#            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {str(e)}")

####### –°–¢–†–ò–ú–ò–ù–ì
#    try:
#        for event in response:
#            if event.type == 'response.output_text.delta':
#                yield event.delta
#            elif event.type == 'response.completed':
#                break
#    except Exception as e:
#        yield f"–û—à–∏–±–∫–∞: {str(e)}"


############# COMPLETIONS (–†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó TOOLS)
#    response = client.chat.completions.create(
#        model="gpt-4o-mini",
#        messages=[
#            {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ª–æ–≥–æ–ø–µ–¥–∏–∏."},
#            {"role": "user", "content": prompt}
#        ],
#        max_tokens=2000,
#        stream=True  # –í–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º
#    )

#    for chunk in response:
#        if chunk.choices and chunk.choices[0].delta and chunk.choices[0].delta.content:
#            yield chunk.choices[0].delta.content


# –°–ª—É—á–∞–π–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫ –≤ –±–ª–æ–∫–Ω–æ—Ç–µ
drawing = random.choice(drawings)
# –¢–µ–∫—Å—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –∏ —Ä–∏—Å—É–Ω–∫–æ–º –≤ –±–ª–æ–∫–Ω–æ—Ç–µ
hint_text = f"""–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –ø–ª–∞–Ω –∑–∞–Ω—è—Ç–∏—è ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–≤–æ–¥–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç**

<pre>
{drawing}
</pre>
"""

########## –ò–ù–¢–ï–†–§–ï–ô–°
#–¢–ï–ú–ê –ò –°–¢–ò–õ–ò

### css –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫
#theme='earneleh/paris'
theme = gr.themes.Base(
    secondary_hue="rose",
    neutral_hue="stone",
).set(
    body_background_fill='*primary_50',
    body_text_color='*primary_900',
    body_text_size='*text_lg',
    body_text_color_subdued='*primary_700',
    body_text_weight='600',
)
css_path = os.path.join(os.path.dirname(__file__), "styles.css")

# –ò–ù–¢–ï–†–§–ï–ô–°
with gr.Blocks(theme=theme, css_paths=css_path) as demo:
    gr.Markdown("# –õ–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç", elem_classes=["main-title"])
    quote_box = gr.Markdown(random.choice(quotes), elem_classes=["quote-block"])

    with gr.Row():
        # –õ–µ–≤—ã–π –±–ª–æ–∫ (–≤—Å–µ –ø–æ–ª—è)
        with gr.Column(elem_classes=["left-col"], scale=1):
            # –ë–ª–æ–∫ 1: –†–µ–±—ë–Ω–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –ø–æ–ª—è)
            with gr.Column(variant="panel"):  # <<< –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞
                gr.Markdown("### üßí –†–µ–±—ë–Ω–æ–∫", elem_classes=["block-title"])
                –Ω–∞—Ä—É—à–µ–Ω–∏–µ = gr.Textbox(label="–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ*", placeholder="–ü—Ä–∏–º–µ—Ä: –î–∏—Å–ª–∞–ª–∏—è (—Å–≤–∏—Å—Ç—è—â–∏–µ), –û–ù–† II —É—Ä–æ–≤–Ω—è")
                –≤–æ–∑—Ä–∞—Å—Ç = gr.Textbox(label="–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞*", placeholder="–ü—Ä–∏–º–µ—Ä: 5 –ª–µ—Ç, 6-7 –ª–µ—Ç")
                –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è = gr.Textbox(label="–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è", placeholder="–ü—Ä–∏–º–µ—Ä: –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –†–ê–°")



            # –ë–ª–æ–∫ 2: –ó–∞–Ω—è—Ç–∏–µ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –ø–æ–ª—è)
            with gr.Column(variant="panel"):  # <<< –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞
                gr.Markdown("### üìÑ –ó–∞–Ω—è—Ç–∏–µ", elem_classes=["block-title"])
                —Ñ–æ—Ä–º–∞—Ç = gr.Radio(["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ", "–ì—Ä—É–ø–ø–æ–≤–æ–µ"], label="–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è", value="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ")
                –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π = gr.Slider(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø–µ", minimum=2, maximum=10, value=2, step=1, visible=False)
                def toggle_group_slider(selected_format):
                    if selected_format == "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ":
                        return gr.update(visible=False, value=1)  # –°–∫—Ä—ã—Ç—å —Å–ª–∞–π–¥–µ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 1
                    else:
                        return gr.update(visible=True, value=2)  # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–∞–π–¥–µ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 2
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏
                —Ñ–æ—Ä–º–∞—Ç.change(fn=toggle_group_slider, inputs=—Ñ–æ—Ä–º–∞—Ç, outputs=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π)

                —Ü–µ–ª—å = gr.Textbox(label="–¶–µ–ª—å –∑–∞–Ω—è—Ç–∏—è*", placeholder="–ü—Ä–∏–º–µ—Ä: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞ [–†] –≤ —Å–ª–æ–≥–∞—Ö")
                —Ç–µ–º–∞ = gr.Textbox(label="–¢–µ–º–∞", placeholder="–ü—Ä–∏–º–µ—Ä: –ñ–∏–≤–æ—Ç–Ω—ã–µ, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
                –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = gr.Slider(label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è (–º–∏–Ω)", minimum=15, maximum=60, value=30, step=5)
                –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å = gr.Textbox(label="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", placeholder="–ü—Ä–∏–º–µ—Ä: –ó–µ—Ä–∫–∞–ª–æ, –ö–∞—Ä—Ç–æ—á–∫–∏, –ö—É–∫–ª—ã")
                –¥–∑ = gr.Checkbox(label="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
                # –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
                gr.Markdown("---")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                # gr.Markdown("### üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", elem_classes=["block-title", "pro-title"])

                with gr.Row(variant="panel"):  # –í–∞—Ä–∏–∞–Ω—Ç "panel" –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
                    file_search = gr.Checkbox(
                        label="üìö –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–∏—Ö –±–∞–∑–∞—Ö",
                        info="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ (FS)",
                        interactive=True
                    )

            #web_sources = gr.Textbox(
            #    label="–£—Ç–æ—á–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            #    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Logopedy.ru, Maam.ru, ...",
            #    visible=False,
            #)

            # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            #web.change(
            #    fn=lambda x: gr.update(visible=x),
            #    inputs=web,
            #    outputs=web_sources
            #)

            # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
            btn = gr.Button("–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", variant="primary")

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç (output)
        with gr.Column(elem_classes=["right-col"], scale=2):
            # –û–±—â–∏–π –±–ª–æ–∫-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
            with gr.Column(variant="panel"):  # <<< –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
                gr.Markdown("### –ö–æ–Ω—Å–ø–µ–∫—Ç", elem_classes=["block-title"])  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –í–ù–£–¢–†–ò –ø–∞–Ω–µ–ª–∏
                # –ë–ª–æ–∫ —Å –≤—ã–≤–æ–¥–æ–º –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
                output = gr.Markdown(
                    hint_text,
                    elem_id="plan-output"
                )
                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏ –ø–∞–Ω–µ–ª–∏)
                download_btn = gr.DownloadButton(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å .docx",
                    visible=False
                )

    # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    all_inputs = [
        –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç, –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è,
        —Ñ–æ—Ä–º–∞—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π, —Ü–µ–ª—å, —Ç–µ–º–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å,
        –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –¥–∑, file_search #web_sources
    ]


    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ docx —Ñ–∞–π–ª–∞
    def generate_docx(text: str):
        doc = Document()
        for line in text.split("\n"):
            doc.add_paragraph(line)
        tmp_dir = tempfile.gettempdir()
        file_path = os.path.join(tmp_dir, "–ö–æ–Ω—Å–ø–µ–∫—Ç_–∑–∞–Ω—è—Ç–∏—è.docx")
        doc.save(file_path)
        return file_path

################### –°–¢–†–ò–ú–ò–ù–ì
#    def on_submit_with_spinner(*args):
#        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
#        if not args[0] or not args[1] or not args[5]:
#            yield (
#                *[gr.update(interactive=True) for _ in all_inputs],
#                gr.update(value="‚ùó–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏—è"),
#                gr.update(visible=False)
#            )
#            return

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
#        yield (
#            *[gr.update(interactive=False) for _ in all_inputs],
#            gr.update(value="‚è≥ –ö–æ–Ω—Å–ø–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è..."),
#            gr.update(visible=False)
#        )

#        full_response = []
#        try:
#            for chunk in generate_lesson_plan_interface(*args):
#                full_response.append(chunk)
#                yield (
#                    *[gr.update(interactive=False) for _ in all_inputs],
#                    gr.update(value="".join(full_response)),
#                    gr.update(visible=False)
#                )

            # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞
#            file_path = generate_docx("".join(full_response))
#            yield (
#                *[gr.update(interactive=True) for _ in all_inputs],
#                gr.update(value="".join(full_response)),
#                gr.update(visible=True, value=file_path)
#            )

#        except Exception as e:
#            yield (
#                *[gr.update(interactive=True) for _ in all_inputs],
#                gr.update(value=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"),
#                gr.update(visible=False)
#            )

################## –ë–ï–ó –°–¢–†–ò–ú–ò–ù–ì–ê
    def on_submit_with_spinner(*args):
        if not args[0] or not args[1] or not args[5]:
            return (
                *[gr.update(interactive=True) for _ in all_inputs],
                gr.update(value="‚ùó–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏—è"),
                gr.update(visible=False)
            )

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        try:
            response_text = generate_lesson_plan_interface(*args)
            file_path = generate_docx(response_text)
            return (
                *[gr.update(interactive=True) for _ in all_inputs],
                gr.update(value=response_text),
                gr.update(visible=True, value=file_path)
            )

        except Exception as e:
            return (
                *[gr.update(interactive=True) for _ in all_inputs],
                gr.update(value=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"),
                gr.update(visible=False)
            )


    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    btn.click(
        fn=on_submit_with_spinner,
        inputs=all_inputs,
        outputs=[*all_inputs, output, download_btn]) # <- —Å–∫–æ–±–∫—É –µ—Å–ª–∏ –Ω–µ —Å—Ç—Ä–∏–º–º–∏–Ω–≥
#    ).then(
#        lambda: None,
#        inputs=[],
#        outputs=[]
#    )

if __name__ == "__main__":
    demo.launch()