import os
from dotenv import load_dotenv
from openai import OpenAI
import gradio as gr
import time
from datetime import datetime
import calendar
from docx import Document
import tempfile
import random  # –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã
from app.quotes import quotes
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api_key = os.getenv("API_KEY_openai")
client = OpenAI(api_key=api_key)

# API_KEY = os.getenv("API_KEY")
# BASE_URL = os.getenv("BASE_URL")
# client = OpenAI(api_key=API_KEY, base_url=BASE_URL)


def log_annotations_directly(response):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞
        if hasattr(response, 'content'):
            for content in response.content:
                if hasattr(content, 'annotations') and content.annotations:
                    logging.info("\n=== –ù–ê–ô–î–ï–ù–´ –ê–ù–ù–û–¢–ê–¶–ò–ò ===")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º print –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                    for annotation in content.annotations:
                        if hasattr(annotation, 'url'):
                            logging.info(f"URL: {annotation.url}")
                            if hasattr(annotation, 'title'):
                                print(f"Title: {annotation.title}")
                            logging.info("------")
                    return

        logging.info("–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")

    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π: {str(e)}")
# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –∑–∞–Ω—è—Ç–∏—è
def generate_lesson_plan_interface(
        –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞, –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è,
        —Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π, —Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è, —Ç–µ–º–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è,
        –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –Ω–∞–ª–∏—á–∏–µ_–î–ó, —Ä–∞–∑—Ä–µ—à–µ–Ω_web_search, web_sources, —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü=None
):
    # –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ - –µ—Å–ª–∏ –µ—Å—Ç—å, –ø–µ—Ä–µ–¥–∞–µ–º
    –∏—Å—Ç–æ—á–Ω–∏–∫–∏ = [web_sources] if —Ä–∞–∑—Ä–µ—à–µ–Ω_web_search and web_sources else []


    # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
    if not —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü:
        —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü = datetime.now().month

    # –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        "–Ω–∞—Ä—É—à–µ–Ω–∏–µ": –Ω–∞—Ä—É—à–µ–Ω–∏–µ,
        "–≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞": –≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞,
        "—Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è": —Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è,
        "—Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è": —Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è,
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π,
        "—Ç–µ–º–∞": —Ç–µ–º–∞,
        "–æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è": –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è,
        "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å,
        "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è": –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è,
        "–Ω–∞–ª–∏—á–∏–µ_–î–ó": –Ω–∞–ª–∏—á–∏–µ_–î–ó,
        "—Ä–∞–∑—Ä–µ—à–µ–Ω_web_search": —Ä–∞–∑—Ä–µ—à–µ–Ω_web_search,
        "–∏—Å—Ç–æ—á–Ω–∏–∫–∏": –∏—Å—Ç–æ—á–Ω–∏–∫–∏,
        "—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü": —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü
    }

    if —Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è == "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ":
        params["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π"] = 1
    # –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    –∏—Å—Ç–æ—á–Ω–∏–∫–∏_—Å—Ç—Ä–æ–∫–∞ = f"- **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞:** {'; '.join(–∏—Å—Ç–æ—á–Ω–∏–∫–∏)}" if —Ä–∞–∑—Ä–µ—à–µ–Ω_web_search and –∏—Å—Ç–æ—á–Ω–∏–∫–∏ else ""

    prompt = f"""
        –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ª–æ–≥–æ–ø–µ–¥–∏–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –¥–µ—Ç–µ–π —Å —Ä–µ—á–µ–≤—ã–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏. 
        –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω—è—Ç–∏—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
        - **–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞:** {params['–Ω–∞—Ä—É—à–µ–Ω–∏–µ']}
        - **–í–æ–∑—Ä–∞—Å—Ç:** {params['–≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞']}
        - **–¶–µ–ª—å –∑–∞–Ω—è—Ç–∏—è:** {params['—Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è']}
        - **–¢–µ–º–∞:** {params['—Ç–µ–º–∞'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ü—Ä–∏–¥—É–º–∞–π —Å–∞–º, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ –∏ —Ü–µ–ª–∏ –∑–∞–Ω—è—Ç–∏—è"}
        - **–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è:** {params['—Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è']} ({params['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π']} –¥–µ—Ç–µ–π)
        - **–î–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:** {params['–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ, –Ω–∞ —Ç–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"}
        - **–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è:** {params['–æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è'] or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}
        - **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è:** {params['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è']} –º–∏–Ω—É—Ç
        - **–ù–∞–ª–∏—á–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:** {params['–Ω–∞–ª–∏—á–∏–µ_–î–ó']}
        - **–ü–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É:** {params['—Ä–∞–∑—Ä–µ—à–µ–Ω_web_search']}
        - **–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü :** {params['—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü']} (1=—è–Ω–≤–∞—Ä—å –∏ —Ç.–¥.)
        {–∏—Å—Ç–æ—á–Ω–∏–∫–∏_—Å—Ç—Ä–æ–∫–∞}
        –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –∑–∞–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
        1. **–¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è, —Ü–µ–ª—å –∏ –∑–∞–¥–∞—á–∏ (–Ω–µ –±–æ–ª–µ–µ 3-—Ö)** 
        2. **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å**
        3. **–•–æ–¥ –∑–∞–Ω—è—Ç–∏—è**. –°–æ—Å—Ç–æ–∏—Ç –∏–∑ –ª–æ–≥–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤.
        –í –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –≤—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤.
        –°–¢–†–û–ì–û: **–µ—Å–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É: True**, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å—Ç—Ä–æ–π –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ –±–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. 
        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ **–ø—Ä–∏–≤–µ–¥–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏** –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞.
        5. **–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ** (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä "–Ω–∞–ª–∏—á–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: True", –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å—Ç–∏)
        6. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Å–æ–±—ã–º —É—Å–ª–æ–≤–∏—è–º** (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä "–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è", –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å—Ç–∏)
        """

    tools = []
    tool_choice = None

    if params['—Ä–∞–∑—Ä–µ—à–µ–Ω_web_search']:
        tools.append({
            "type": "web_search_preview",
            "search_context_size": "low",
            "user_location": {
                "type": "approximate",
                "country": "RU"
            }
        })
        tool_choice = {"type": "web_search_preview"}

    response = client.responses.create(
        model="gpt-4o-mini",
        input=prompt,
        tools=tools if tools else None,
        tool_choice=tool_choice,
        max_output_tokens=2000,
        stream=False
    )
####### –ë–ï–ó –°–¢–†–ò–ú–ò–ù–ì–ê
    log_annotations_directly(response)
    return response.output_text


####### –°–¢–†–ò–ú–ò–ù–ì
#    try:
#        for event in response:
#            if event.type == 'response.output_text.delta':
#                yield event.delta
#            elif event.type == 'response.completed':
#                break
#    except Exception as e:
#        yield f"–û—à–∏–±–∫–∞: {str(e)}"




############# COMPLETIONS (–†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó TOOLS)
#    response = client.chat.completions.create(
#        model="gpt-4o-mini",
#        messages=[
#            {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ª–æ–≥–æ–ø–µ–¥–∏–∏."},
#            {"role": "user", "content": prompt}
#        ],
#        max_tokens=2000,
#        stream=True  # –í–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º
#    )

#    for chunk in response:
#        if chunk.choices and chunk.choices[0].delta and chunk.choices[0].delta.content:
#            yield chunk.choices[0].delta.content


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio
with gr.Blocks() as demo:
    gr.Markdown("## üß† –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–Ω—è—Ç–∏–π")

    with gr.Row():
        # –ü–µ—Ä–≤—ã–π –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–†–µ–±–µ–Ω–æ–∫)
        with gr.Column(scale=1):
            quote_box = gr.Markdown(random.choice(quotes), elem_classes=["quote-block"])

            gr.Markdown("### üßí –†–µ–±—ë–Ω–æ–∫", elem_classes=["block-title"])
            –Ω–∞—Ä—É—à–µ–Ω–∏–µ = gr.Textbox(label="–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ*",
                                   placeholder="–ü—Ä–∏–º–µ—Ä: –î–∏—Å–ª–∞–ª–∏—è (—Å–≤–∏—Å—Ç—è—â–∏–µ), –û–ù–† II —É—Ä–æ–≤–Ω—è")
            –≤–æ–∑—Ä–∞—Å—Ç = gr.Textbox(label="–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞*", placeholder="–ü—Ä–∏–º–µ—Ä: 5 –ª–µ—Ç, 6-7 –ª–µ—Ç")
            –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è = gr.Textbox(label="–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è", placeholder="–ü—Ä–∏–º–µ—Ä: –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –†–ê–°")

            gr.Markdown("### üìÑ –ó–∞–Ω—è—Ç–∏–µ", elem_classes=["block-title"])
            —Ñ–æ—Ä–º–∞—Ç = gr.Radio(["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ", "–ì—Ä—É–ø–ø–æ–≤–æ–µ"], label="–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è", value="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ")
            –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π = gr.Slider(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø–µ", minimum=2, maximum=10, value=2, step=1, visible=False
            )


            def toggle_group_slider(selected_format):
                return gr.update(visible=(selected_format == "–ì—Ä—É–ø–ø–æ–≤–æ–µ"))


            —Ñ–æ—Ä–º–∞—Ç.change(fn=toggle_group_slider, inputs=—Ñ–æ—Ä–º–∞—Ç, outputs=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π)

            —Ü–µ–ª—å = gr.Textbox(label="–¶–µ–ª—å –∑–∞–Ω—è—Ç–∏—è*", placeholder="–ü—Ä–∏–º–µ—Ä: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞ [–†] –≤ —Å–ª–æ–≥–∞—Ö")
            —Ç–µ–º–∞ = gr.Textbox(label="–¢–µ–º–∞", placeholder="–ü—Ä–∏–º–µ—Ä: –ñ–∏–≤–æ—Ç–Ω—ã–µ, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = gr.Slider(label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è (–º–∏–Ω)", minimum=15, maximum=60, value=30, step=5)
            –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å = gr.Textbox(label="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
                                   placeholder="–ü—Ä–∏–º–µ—Ä: –ó–µ—Ä–∫–∞–ª–æ, –ö–∞—Ä—Ç–æ—á–∫–∏, –ö—É–∫–ª—ã")

            –¥–∑ = gr.Checkbox(label="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
            # –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            gr.Markdown("---")  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            # gr.Markdown("### üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", elem_classes=["block-title", "pro-title"])

            with gr.Row(variant="panel"):  # –í–∞—Ä–∏–∞–Ω—Ç "panel" –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
                web = gr.Checkbox(
                    label="üìö –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–∏—Ö –±–∞–∑–∞—Ö",
                    info="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏",
                    interactive=True
                )

            web_sources = gr.Textbox(
                label="–£—Ç–æ—á–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Logopedy.ru, Maam.ru, ...",
                visible=False,
            )

            # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            web.change(
                fn=lambda x: gr.update(visible=x),
                inputs=web,
                outputs=web_sources
            )

            # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
            btn = gr.Button("–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", variant="primary")

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç (output)
        with gr.Column(scale=2):  # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            download_btn = gr.DownloadButton(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å .docx",
                visible=False
            )
            output = gr.Markdown("")  # –ü–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞

    # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    all_inputs = [
        –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç, –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è,
        —Ñ–æ—Ä–º–∞—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π, —Ü–µ–ª—å, —Ç–µ–º–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å,
        –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –¥–∑, web, web_sources
    ]


    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ docx —Ñ–∞–π–ª–∞
    def generate_docx(text: str):
        doc = Document()
        for line in text.split("\n"):
            doc.add_paragraph(line)
        tmp_dir = tempfile.gettempdir()
        file_path = os.path.join(tmp_dir, "–ö–æ–Ω—Å–ø–µ–∫—Ç_–∑–∞–Ω—è—Ç–∏—è.docx")
        doc.save(file_path)
        return file_path

################### –°–¢–†–ò–ú–ò–ù–ì
#    def on_submit_with_spinner(*args):
#        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
#        if not args[0] or not args[1] or not args[5]:
#            yield (
#                *[gr.update(interactive=True) for _ in all_inputs],
#                gr.update(value="‚ùó–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏—è"),
#                gr.update(visible=False)
#            )
#            return

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
#        yield (
#            *[gr.update(interactive=False) for _ in all_inputs],
#            gr.update(value="‚è≥ –ö–æ–Ω—Å–ø–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è..."),
#           gr.update(visible=False)
#        )

#       full_response = []
#        try:
#            for chunk in generate_lesson_plan_interface(*args):
#                full_response.append(chunk)
#                yield (
#                    *[gr.update(interactive=False) for _ in all_inputs],
#                    gr.update(value="".join(full_response)),
#                    gr.update(visible=False)
#                )

            # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞
#            file_path = generate_docx("".join(full_response))
#            yield (
#                *[gr.update(interactive=True) for _ in all_inputs],
#                gr.update(value="".join(full_response)),
#                gr.update(visible=True, value=file_path)
#            )

#        except Exception as e:
#            yield (
#                *[gr.update(interactive=True) for _ in all_inputs],
#                gr.update(value=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"),
#                gr.update(visible=False)
#            )

################## –ë–ï–ó –°–¢–†–ò–ú–ò–ù–ì–ê
    def on_submit_with_spinner(*args):
        if not args[0] or not args[1] or not args[5]:
            return (
                *[gr.update(interactive=True) for _ in all_inputs],
                gr.update(value="‚ùó–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏—è"),
                gr.update(visible=False)
            )

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        try:
            response_text = generate_lesson_plan_interface(*args)
            file_path = generate_docx(response_text)
            return (
                *[gr.update(interactive=True) for _ in all_inputs],
                gr.update(value=response_text),
                gr.update(visible=True, value=file_path)
            )

        except Exception as e:
            return (
                *[gr.update(interactive=True) for _ in all_inputs],
                gr.update(value=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"),
                gr.update(visible=False)
            )


    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    btn.click(
        fn=on_submit_with_spinner,
        inputs=all_inputs,
        outputs=[*all_inputs, output, download_btn]) # <- —Å–∫–æ–±–∫—É –µ—Å–ª–∏ –Ω–µ —Å—Ç—Ä–∏–º–º–∏–Ω–≥
#    ).then(
#        lambda: None,
#        inputs=[],
#        outputs=[]
#    )

if __name__ == "__main__":
    demo.launch(share=True)