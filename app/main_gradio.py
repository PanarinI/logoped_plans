import os
from dotenv import load_dotenv
from openai import OpenAI
import gradio as gr
import time
from datetime import datetime
import calendar
from docx import Document
import tempfile

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api_key = os.getenv("API_KEY_openai")
client = OpenAI(api_key=api_key)

#API_KEY = os.getenv("API_KEY")
#BASE_URL = os.getenv("BASE_URL")
#client = OpenAI(api_key=API_KEY, base_url=BASE_URL)


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –∑–∞–Ω—è—Ç–∏—è
def generate_lesson_plan_interface(
    –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞, –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è,
    —Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π, —Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è, —Ç–µ–º–∞—Ç–∏–∫–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è,
    –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –Ω–∞–ª–∏—á–∏–µ_–î–ó, —Ä–∞–∑—Ä–µ—à–µ–Ω_web_search, web_sources, —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü=None
):

    # –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ - –µ—Å–ª–∏ –µ—Å—Ç—å, –ø–µ—Ä–µ–¥–∞–µ–º
    –∏—Å—Ç–æ—á–Ω–∏–∫–∏ = [web_sources] if —Ä–∞–∑—Ä–µ—à–µ–Ω_web_search else []

    # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—è—Ü–∞
    if not —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü:
        —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü = datetime.now().month

    # –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        "–Ω–∞—Ä—É—à–µ–Ω–∏–µ": –Ω–∞—Ä—É—à–µ–Ω–∏–µ,
        "–≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞": –≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞,
        "—Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è": —Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è,
        "—Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è": —Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è,
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π,
        "—Ç–µ–º–∞—Ç–∏–∫–∞": —Ç–µ–º–∞—Ç–∏–∫–∞,
        "–æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è": –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è,
        "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å,
        "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è": –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è,
        "–Ω–∞–ª–∏—á–∏–µ_–î–ó": –Ω–∞–ª–∏—á–∏–µ_–î–ó,
        "—Ä–∞–∑—Ä–µ—à–µ–Ω_web_search": —Ä–∞–∑—Ä–µ—à–µ–Ω_web_search,
        "–∏—Å—Ç–æ—á–Ω–∏–∫–∏": –∏—Å—Ç–æ—á–Ω–∏–∫–∏,
        "—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü": —Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü
    }

    prompt = f"""
        –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ª–æ–≥–æ–ø–µ–¥–∏–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –¥–µ—Ç–µ–π —Å —Ä–µ—á–µ–≤—ã–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏. –ù–∞ –≤—Ö–æ–¥ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - **–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ:** {params['–Ω–∞—Ä—É—à–µ–Ω–∏–µ']}
        - **–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:** {params['–≤–æ–∑—Ä–∞—Å—Ç_—Ä–µ–±–µ–Ω–∫–∞']}
        - **–¶–µ–ª—å –∑–∞–Ω—è—Ç–∏—è:** {params['—Ü–µ–ª—å_–∑–∞–Ω—è—Ç–∏—è']}
        - **–¢–µ–º–∞—Ç–∏–∫–∞:** {params['—Ç–µ–º–∞—Ç–∏–∫–∞'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ü—Ä–∏–¥—É–º–∞–π —Å–∞–º, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ –∏ —Ü–µ–ª–∏ –∑–∞–Ω—è—Ç–∏—è"}
        - **–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è:** {params['—Ñ–æ—Ä–º–∞—Ç_–∑–∞–Ω—è—Ç–∏—è']} ({params['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π']} –¥–µ—Ç–µ–π)
        - **–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:** {params['–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
        - **–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è:** {params['–æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è'] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
        - **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è:** {params['–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–∑–∞–Ω—è—Ç–∏—è']} –º–∏–Ω—É—Ç
        - **–ù–∞–ª–∏—á–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:** {params['–Ω–∞–ª–∏—á–∏–µ_–î–ó']}
        - **–†–∞–∑—Ä–µ—à–µ–Ω web search:** {params['—Ä–∞–∑—Ä–µ—à–µ–Ω_web_search']}
        - **–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:** {params['—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü']}

        –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Å—Ç–∞–≤—å –∫–æ–Ω—Å–ø–µ–∫—Ç –∑–∞–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
        1. **–¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è, —Ü–µ–ª—å –∏ –∑–∞–¥–∞—á–∏** 
        2. **–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã**
        3. **–•–æ–¥ –∑–∞–Ω—è—Ç–∏—è**. –†–∞–∑–±–µ–π –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã.
        –í –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –≤—Å—Ç—Ä–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤.
        –í–ê–ñ–ù–û: –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω web search: True, —Ç–æ –≤—ã—Å—Ç—Ä–æ–π –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ –±–∞–∑–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. 
        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–µ–¥–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞).
        –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –≤ –∑–∞–¥–∞–Ω–∏—è—Ö –º–æ—Ç–∏–≤—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≥–æ–¥–∞
        5. **–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ** (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä "–Ω–∞–ª–∏—á–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: True")
        6. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Å–æ–±—ã–º —É—Å–ª–æ–≤–∏—è–º** (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä "–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è")
        """

    tools = []
    tool_choice = None

    if params['—Ä–∞–∑—Ä–µ—à–µ–Ω_web_search']:
        tools.append({
            "type": "web_search_preview",
            "search_context_size": "medium",
            "user_location": {
                "type": "approximate",
                "country": "RU"
            }
        })
        tool_choice = {"type": "web_search_preview"}

    response = client.responses.create(
        model="gpt-4o-mini",
        input=prompt,
        tools=tools if tools else None,
        tool_choice=tool_choice,
        max_output_tokens=2000
    )
    return response.output_text

#    response = client.chat.completions.create(
#        model="gpt-4o-mini",
#        messages=[
#            {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –ª–æ–≥–æ–ø–µ–¥–∏–∏."},
#            {"role": "user", "content": prompt}
#        ],
#        max_tokens=2000
#    )
#    return response.choices[0].message.content

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio
with gr.Blocks() as demo:
    gr.Markdown("## üß† –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–Ω—è—Ç–∏–π")

    # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–†–µ–±–µ–Ω–æ–∫)
    with gr.Box():
        gr.Markdown("### üßí –†–µ–±—ë–Ω–æ–∫", elem_classes=["block-title"])
        –Ω–∞—Ä—É—à–µ–Ω–∏–µ = gr.Textbox(label="–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ*",
                               placeholder="–ü—Ä–∏–º–µ—Ä: –î–∏—Å–ª–∞–ª–∏—è (—Å–≤–∏—Å—Ç—è—â–∏–µ), –û–ù–† II —É—Ä–æ–≤–Ω—è")
        –≤–æ–∑—Ä–∞—Å—Ç = gr.Textbox(label="–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞*", placeholder="–ü—Ä–∏–º–µ—Ä: 5 –ª–µ—Ç, 6-7 –ª–µ—Ç")
        –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è = gr.Textbox(label="–û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è", placeholder="–ü—Ä–∏–º–µ—Ä: –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –†–ê–°")

    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ó–∞–Ω—è—Ç–∏–µ)
    with gr.Box():
        gr.Markdown("### üìÑ –ó–∞–Ω—è—Ç–∏–µ", elem_classes=["block-title"])
        —Ñ–æ—Ä–º–∞—Ç = gr.Radio(["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ", "–ì—Ä—É–ø–ø–æ–≤–æ–µ"], label="–§–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏—è", value="–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ")
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π = gr.Slider(
            label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø–µ", minimum=2, maximum=10, value=2, step=1, visible=False
        )


        def toggle_group_slider(selected_format):
            return gr.update(visible=(selected_format == "–ì—Ä—É–ø–ø–æ–≤–æ–µ"))


        —Ñ–æ—Ä–º–∞—Ç.change(fn=toggle_group_slider, inputs=—Ñ–æ—Ä–º–∞—Ç, outputs=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π)

        —Ü–µ–ª—å = gr.Textbox(label="–¶–µ–ª—å –∑–∞–Ω—è—Ç–∏—è*", placeholder="–ü—Ä–∏–º–µ—Ä: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–∞ [–†] –≤ —Å–ª–æ–≥–∞—Ö")
        —Ç–µ–º–∞—Ç–∏–∫–∞ = gr.Textbox(label="–¢–µ–º–∞—Ç–∏–∫–∞", placeholder="–ü—Ä–∏–º–µ—Ä: –ñ–∏–≤–æ—Ç–Ω—ã–µ, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = gr.Slider(label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è (–º–∏–Ω)", minimum=15, maximum=60, value=30, step=5)
        –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å = gr.Textbox(label="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (–≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
                               placeholder="–ü—Ä–∏–º–µ—Ä: –ó–µ—Ä–∫–∞–ª–æ, –ö–∞—Ä—Ç–æ—á–∫–∏, –ò–≥—Ä—É—à–∫–∏")
        –¥–∑ = gr.Checkbox(label="–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
        web = gr.Checkbox(label="–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")


        def toggle_web_source_input(allow_web_search):
            return gr.update(visible=allow_web_search)


        # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        web_sources = gr.Textbox(label="–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
                                 visible=False)

        # –û–±–Ω–æ–≤–∏–º –ª–æ–≥–∏–∫—É —á–µ–∫–±–æ–∫—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        web.change(fn=toggle_web_source_input, inputs=web, outputs=web_sources)

        btn = gr.Button("–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç")

    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç (output)
    with gr.Column(scale=2):
        output = gr.Markdown("")

    # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    all_inputs = [
        –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç, –æ—Å–æ–±—ã–µ_—É—Å–ª–æ–≤–∏—è,
        —Ñ–æ—Ä–º–∞—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–µ—Ç–µ–π, —Ü–µ–ª—å, —Ç–µ–º–∞—Ç–∏–∫–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å,
        –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –¥–∑, web, web_sources
    ]



    def generate_docx(text: str):
        doc = Document()
        for line in text.split("\n"):
            doc.add_paragraph(line)
        tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
        doc.save(tmp_file.name)
        return tmp_file.name


    def on_submit_with_spinner(*args):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not args[0] or not args[1] or not args[5]:
            yield (
                *[gr.update(interactive=True) for _ in all_inputs],
                gr.update(value="‚ùó–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏—è")
            )
            return

        yield (
            *[gr.update(interactive=False) for _ in all_inputs],
            gr.update(value="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞...")
        )

        result = generate_lesson_plan_interface(*args)

        yield (
            *[gr.update(interactive=True) for _ in all_inputs],
            gr.update(value=result)
        )

        docx_path = generate_docx(result)
        download_btn = gr.File(label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∫–∞–∫ .docx", visible=False)

        yield (
            *[gr.update(interactive=True) for _ in all_inputs],
            gr.update(value=result),
            gr.update(value=docx_path, visible=True)  # –¥–ª—è download_btn
        )


    btn.click(
        fn=on_submit_with_spinner,
        inputs=[*all_inputs],
        outputs=[*all_inputs, output, download_btn]
    )


if __name__ == "__main__":
    demo.launch(share=True)